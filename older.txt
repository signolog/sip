// desktop ekranında soldaki start end seçme kısmı

          <h3>Başlangıç Odası</h3>    
          <select
            value={selectedStartRoom}
            onChange={(e) => setSelectedStartRoom(e.target.value)}
            style={{ width: "100%", padding: 6 }}
          >
            <option value="">Seçiniz</option>
            {rooms.map((r) => (
              <option key={r.id} value={r.id}>
                {r.name} (Kat {r.floor})
              </option>
            ))}
          </select>

          <h3>Bitiş Odası</h3>
          <select
            value={selectedEndRoom}
            onChange={(e) => setSelectedEndRoom(e.target.value)}
            style={{ width: "100%", padding: 6 }}
          >
            <option value="">Seçiniz</option>
            {rooms.map((r) => (
              <option key={r.id} value={r.id}>
                {r.name} (Kat {r.floor})
              </option>
            ))}
          </select>

          //totalDistance kısmı
          <div style={{ marginTop: "1rem", fontWeight: "bold" }}>
            {selectedStartRoom && selectedEndRoom ? (
              totalDistance > 0 ? (
                <p>Toplam Mesafe: {totalDistance.toFixed(1)} m</p>
              ) : (
                <p style={{ color: "red" }}>Rota bulunamadı!</p>
              )
            ) : (
              <p>Oda seçimi bekleniyor...</p>
            )}
          </div>

//silinen bir useEffect
 useEffect(() => {
 routeStepsRef.current = routeSteps;
 }, [routeSteps]);

/// TOKEN HESAPLAMA STATE VE FUNCTIONLARI
 // Token hesaplama state'leri
  const [tokenStats, setTokenStats] = useState({
    totalTokens: 0,
    inputTokens: 0,
    outputTokens: 0,
    totalCostUSD: 0,
    requestCount: 0,
  });

  // Token fiyatları (GPT-4o için)
  const tokenPrices = {
    input: 2.5 / 1000000, // $2.5 per 1M input tokens
    output: 20.0 / 1000000, // $10.0 per 1M output tokens
  };

  // Token hesaplama fonksiyonu
  const calculateTokens = (text) => {
    // Basit token hesaplama (yaklaşık 4 karakter = 1 token)
    return Math.ceil(text.length / 4);
  };

  const updateTokenStats = (inputText, outputText) => {
    const inputTokenCount = calculateTokens(inputText);
    const outputTokenCount = calculateTokens(outputText);
    const totalNewTokens = inputTokenCount + outputTokenCount;

    const inputCost = inputTokenCount * tokenPrices.input;
    const outputCost = outputTokenCount * tokenPrices.output;
    const requestCost = inputCost + outputCost;

    setTokenStats((prev) => ({
      totalTokens: prev.totalTokens + totalNewTokens,
      inputTokens: prev.inputTokens + inputTokenCount,
      outputTokens: prev.outputTokens + outputTokenCount,
      totalCostUSD: prev.totalCostUSD + requestCost,
      requestCount: prev.requestCount + 1,
    }));
  };


//gpt handle functionCall visit_location
const handleVisitLocation = async (argsStr) => {
    const args = JSON.parse(argsStr);
    console.log("visit_location tetiklendi:", args);

    if (!userId) {
      // Giriş yapılmamışsa GPT'ye "login yok" mesajı döndür
      const functionResult = {
        error: "Kullanıcı girişi yapılmamış. Önce giriş yapmalısın.",
        success: false,
      };
      const newMessages = [
        ...chatMessages,
        {
          role: "function",
          name: "visit_location",
          content: JSON.stringify(functionResult),
        },
      ];

      const response = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: newMessages,
        functions,
      });
      const followup = response.choices[0].message;
      setChatMessages((prev) => [...prev, followup]);

      // Token hesaplama
      const inputText = newMessages.map((m) => m.content || "").join(" ");
      const outputText = followup.content || "";
      updateTokenStats(inputText, outputText);

      console.log("visit_location giriş yok, GPT'ye iletildi.");
      return;
    }

    try {
      const res = await fetch("http://localhost:3001/api/visited", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ user_id: userId, location_name: args.location_name }),
      });
      const data = await res.json();

      const newMessages = [
        ...chatMessages,
        {
          role: "function",
          name: "visit_location",
          content: JSON.stringify(data),
        },
      ];
      const response = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: newMessages,
        functions,
      });
      const followup = response.choices[0].message;
      setChatMessages((prev) => [...prev, followup]);

      // Token hesaplama
      const inputText = newMessages.map((m) => m.content || "").join(" ");
      const outputText = followup.content || "";
      updateTokenStats(inputText, outputText);

      console.log("visit_location sonucu GPT'ye iletildi:", data);
    } catch (err) {
      setChatMessages((prev) => [...prev, { role: "assistant", content: "Ziyaret kaydı sırasında bir hata oluştu." }]);
      console.error("visit_location hata:", err);
    }
  };