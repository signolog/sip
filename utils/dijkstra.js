/**
 * Dijkstra algoritmalarƒ± ve path finding fonksiyonlarƒ±
 * Multi-floor ve single-floor routing i√ßin optimize edilmi≈ü algoritmalar
 */

/**
 * Tek kat i√ßinde Dijkstra algoritmasƒ± ile en kƒ±sa yol bulma
 * @param {string} startId - Ba≈ülangƒ±√ß node ID'si
 * @param {string} endId - Hedef node ID'si
 * @param {Object} graph - Graph objesi
 * @returns {Array} En kƒ±sa yol node ID'leri dizisi
 */
export function singleFloorDijkstra(startId, endId, graph) {
  const dist = {};
  const prev = {};
  const visited = new Set();

  Object.keys(graph).forEach((id) => {
    dist[id] = Infinity;
    prev[id] = null;
  });
  dist[startId] = 0;

  while (true) {
    let u = null;
    let min = Infinity;

    for (const id in graph) {
      if (!visited.has(id) && dist[id] < min) {
        min = dist[id];
        u = id;
      }
    }

    if (u === null || u === endId) break;
    visited.add(u);

    for (const { to, weight, type } of graph[u].neighbors) {
      // Door atlama kuralƒ± - sadece hedef door'a girebilir
      const isDoor = graph[to]?.type === "door-node";
      if (isDoor && to !== endId) continue;

      const alt = dist[u] + weight;
      if (alt < dist[to]) {
        dist[to] = alt;
        prev[to] = u;
      }
    }
  }

  const path = [];
  for (let u = endId; u; u = prev[u]) path.push(u);
  return dist[endId] === Infinity ? [] : path.reverse();
}

/**
 * √áok katlƒ± Dijkstra algoritmasƒ± - Entry/Exit mantƒ±ƒüƒ± ile
 * @param {string} startId - Ba≈ülangƒ±√ß node ID'si
 * @param {string} endId - Hedef node ID'si
 * @param {Object} graph - Graph objesi
 * @param {string} preferredTransport - Tercih edilen transport tipi ("escalator" veya "elevator")
 * @param {Object} allGeoData - GeoJSON verileri (floor range kontrol√º i√ßin)
 * @returns {Array} En kƒ±sa yol node ID'leri dizisi
 */
export function multiFloorDijkstra(startId, endId, graph, preferredTransport, allGeoData) {
  const startFloor = graph[startId]?.floor;
  const endFloor = graph[endId]?.floor;

  if (startFloor === endFloor) {
    return singleFloorDijkstra(startId, endId, graph);
  }

  console.log(`üîÑ Cross-floor routing with ENTRY/EXIT LOGIC: Floor ${startFloor} ‚Üí Floor ${endFloor}`);

  // Y√ñN KONTROL√ú: Yukarƒ± mƒ± a≈üaƒüƒ± mƒ± gidiyoruz?
  const isGoingUp = endFloor > startFloor;
  const requiredDirection = isGoingUp ? "up" : "down";

  console.log(`üìà Direction: ${isGoingUp ? "UP ‚¨ÜÔ∏è" : "DOWN ‚¨áÔ∏è"}`);

  // ‚úÖ YENƒ∞: Ba≈ülangƒ±√ß katƒ±nda ENTRY node'larƒ±nƒ± bul
  const startFloorConnectors = Object.keys(graph).filter((id) => {
    const node = graph[id];
    if (node.type !== "floor-connector-node" || node.floor !== startFloor) {
      return false;
    }

    const props = getConnectorProperties(id, graph);

    // üÜï ENTRY NODE ≈ûARTI EKLENDI
    const isEntryNode = props.nodeType === "entry";
    if (!isEntryNode) {
      console.log(`‚ùå ${id}: Not entry node (nodeType: ${props.nodeType})`);
      return false;
    }

    // 1. Transport tipi kontrol√º
    const isPreferredType = props.connectorType === preferredTransport;

    // 2. Direction kontrol√º
    const canUseDirection = canUseConnectorDirection(props, requiredDirection);

    // 3. Floor range kontrol√º
    const canUseFloors = canUseConnectorFloors(id, startFloor, endFloor, graph, allGeoData);

    console.log(`   üîç ENTRY connector ${id}:`);
    console.log(`      Type: ${props.connectorType}, preferred: ${isPreferredType}`);
    console.log(`      Direction: ${canUseDirection}, floors: ${canUseFloors}`);
    console.log(`      NodeType: ${props.nodeType} ‚úÖ`);

    return isPreferredType && canUseDirection && canUseFloors;
  });

  // Tercih edilen tip bulunamazsa fallback yap
  if (startFloorConnectors.length === 0) {
    console.log(`‚ùå ${preferredTransport} ENTRY nodes bulunamadƒ±, diƒüer transport tipine bakƒ±yor...`);

    // Fallback: Diƒüer transport tipindeki ENTRY connector'larƒ± dene
    const fallbackTransport = preferredTransport === "escalator" ? "elevator" : "escalator";

    const fallbackConnectors = Object.keys(graph).filter((id) => {
      const node = graph[id];
      if (node.type !== "floor-connector-node" || node.floor !== startFloor) {
        return false;
      }

      const props = getConnectorProperties(id, graph);

      // üÜï ENTRY NODE ≈ûARTI
      const isEntryNode = props.nodeType === "entry";
      if (!isEntryNode) return false;

      const isTargetType = props.connectorType === fallbackTransport;
      const canUseDirection = canUseConnectorDirection(props, requiredDirection);
      const canUseFloors = canUseConnectorFloors(id, startFloor, endFloor, graph, allGeoData);

      console.log(
        `   üîÑ Fallback ENTRY ${id}: type=${isTargetType}, direction=${canUseDirection}, floors=${canUseFloors}`
      );

      return isTargetType && canUseDirection && canUseFloors;
    });

    if (fallbackConnectors.length > 0) {
      console.log(`‚úÖ Fallback olarak ${fallbackTransport} ENTRY ile ${fallbackConnectors.length} connector bulundu`);
      startFloorConnectors.push(...fallbackConnectors);
    } else {
      console.error(`‚ùå No ${requiredDirection} ENTRY connectors available on start floor ${startFloor}`);
      return [];
    }
  }

  console.log(`üìç Available ENTRY connectors on start floor:`, startFloorConnectors);

  // EN YAKIN ENTRY CONNECTOR'U BUL
  let closestConnector = null;
  let shortestDistanceToConnector = Infinity;

  for (const connectorId of startFloorConnectors) {
    // Ba≈ülangƒ±√ß noktasƒ±ndan bu ENTRY connector'a olan mesafeyi hesapla
    const pathToConnector = singleFloorDijkstra(startId, connectorId, graph);

    if (pathToConnector.length === 0) {
      console.log(`‚ùå Cannot reach ENTRY connector ${connectorId} from start`);
      continue;
    }

    const distanceToConnector = calculatePathDistance(pathToConnector, graph);
    console.log(`üìè Distance to ENTRY ${connectorId}: ${distanceToConnector.toFixed(1)}m`);

    if (distanceToConnector < shortestDistanceToConnector) {
      shortestDistanceToConnector = distanceToConnector;
      closestConnector = connectorId;
    }
  }

  if (!closestConnector) {
    console.error(`‚ùå No reachable ENTRY connectors found on start floor ${startFloor}`);
    return [];
  }

  const closestProps = getConnectorProperties(closestConnector, graph);
  console.log(`‚úÖ Selected CLOSEST ENTRY connector: ${closestConnector}`);
  console.log(`   BaseName: ${closestProps.baseName}, Distance: ${shortestDistanceToConnector.toFixed(1)}m`);

  // En yakƒ±n ENTRY connector ile hedefe kadar olan rotayƒ± hesapla
  const fullPath = findPathThroughConnectorEntryExit(startId, endId, closestConnector, graph, allGeoData);

  if (fullPath.length === 0) {
    console.error(`‚ùå Could not find complete path through closest ENTRY connector ${closestConnector}`);

    // Fallback: Eƒüer en yakƒ±n connector ile rota bulunamazsa, diƒüerlerini de dene
    console.log(`üîÑ Trying fallback with other ENTRY connectors...`);

    let bestPath = [];
    let minTotalDistance = Infinity;

    for (const startConnector of startFloorConnectors) {
      if (startConnector === closestConnector) continue; // Zaten denedik

      console.log(`üîç Fallback testing ENTRY connector: ${startConnector}`);
      const fallbackPath = findPathThroughConnectorEntryExit(startId, endId, startConnector, graph, allGeoData);

      if (fallbackPath.length === 0) continue;

      const totalDist = calculatePathDistance(fallbackPath, graph);
      if (totalDist < minTotalDistance) {
        minTotalDistance = totalDist;
        bestPath = fallbackPath;
        const props = getConnectorProperties(startConnector, graph);
        console.log(`‚úÖ Fallback best path found via ENTRY ${props.baseName}! Total: ${totalDist.toFixed(1)}m`);
      }
    }

    return bestPath;
  }

  const totalDistance = calculatePathDistance(fullPath, graph);
  console.log(`üéØ Path found through CLOSEST ENTRY connector, total distance: ${totalDistance.toFixed(1)}m`);

  return fullPath;
}

/**
 * Path'in toplam mesafesini hesaplar
 * @param {Array} path - Node ID'leri dizisi
 * @param {Object} graph - Graph objesi
 * @returns {number} Toplam mesafe
 */
export function calculatePathDistance(path, graph) {
  let totalDistance = 0;
  for (let i = 0; i < path.length - 1; i++) {
    const u = path[i];
    const v = path[i + 1];

    // Graph'taki edge'i bul
    const edge = graph[u]?.neighbors.find((e) => e.to === v);
    if (edge) {
      totalDistance += edge.weight;
    } else {
      // Virtual edge (floor connector ge√ßi≈üi)
      const uFloor = graph[u]?.floor;
      const vFloor = graph[v]?.floor;
      if (uFloor !== vFloor) {
        totalDistance += 10; // Floor deƒüi≈üimi maliyeti
      }
    }
  }
  return totalDistance;
}

/**
 * Connector'ƒ±n √∂zelliklerini parse eder
 * @param {string} connectorId - Connector ID'si
 * @param {Object} graph - Graph objesi
 * @returns {Object} Connector √∂zellikleri
 */
export function getConnectorProperties(connectorId, graph) {
  const node = graph[connectorId];
  if (!node) return null;

  // GeoJSON'dan gelen direction'ƒ± direkt kullan
  const direction = node.direction;

  // ID'den sadece gerekli bilgileri parse et
  const parts = connectorId.split("-");
  const connectorType = node.connector_type; // default
  const baseName = node.baseName;
  let nodeType = null;

  // entry/exit kontrol√º
  if (parts.includes("entry")) {
    nodeType = "entry";
  } else if (parts.includes("exit")) {
    nodeType = "exit";
  }

  return {
    direction: direction, // GeoJSON'dan gelen deƒüer
    baseName: baseName,
    connectorType: connectorType,
    nodeType: nodeType,
    originalId: node.originalId,
    floor: node.floor,
  };
}

/**
 * Connector'ƒ±n direction a√ßƒ±sƒ±ndan kullanƒ±labilir olup olmadƒ±ƒüƒ±nƒ± kontrol eder
 * @param {Object} connectorProps - Connector √∂zellikleri
 * @param {string} requiredDirection - Gerekli y√∂n ("up", "down", "bidirectional")
 * @returns {boolean} Kullanƒ±labilir mi?
 */
export function canUseConnectorDirection(connectorProps, requiredDirection) {
  // Bidirectional connector her y√∂ne gidebilir
  if (connectorProps.direction === "bidirectional") {
    return true;
  }

  // Diƒüerleri sadece kendi y√∂n√ºne
  return connectorProps.direction === requiredDirection;
}

/**
 * Connector'ƒ±n floor range kontrol√º
 * @param {string} connectorId - Connector ID'si
 * @param {number} currentFloor - Mevcut kat
 * @param {number} targetFloor - Hedef kat
 * @param {Object} graph - Graph objesi
 * @param {Object} allGeoData - GeoJSON verileri
 * @returns {boolean} Kullanƒ±labilir mi?
 */
export function canUseConnectorFloors(connectorId, currentFloor, targetFloor, graph, allGeoData) {
  const node = graph[connectorId];
  if (!node) return false;

  // Mevcut kodunuzdaki mantƒ±ƒüƒ± kullanarak feature'ƒ± bulalƒ±m
  const connectorFeature = Object.values(allGeoData).find((floorData) =>
    floorData.features.some((f) => f.properties.id === node.originalId)
  );

  if (!connectorFeature) return true;

  const feature = connectorFeature.features.find((f) => f.properties.id === node.originalId);
  if (!feature) return true;

  const fromFloor = parseInt(feature.properties.from || currentFloor);
  const toFloor = parseInt(feature.properties.to || currentFloor);

  // Sadece ≈üunlarƒ± kontrol et:
  // 1. Bu escalator mevcut katƒ±mdan ba≈ülƒ±yor mu?
  // 2. Bu escalator hedefe doƒüru bir adƒ±m atƒ±yor mu?

  const startsFromCurrentFloor = currentFloor === fromFloor || currentFloor === toFloor;

  // Doƒüru y√∂n kontrol√º: Bir sonraki kat hedef y√∂n√ºnde mi?
  const nextFloor = currentFloor === fromFloor ? toFloor : fromFloor;
  const isCorrectDirection =
    (targetFloor > currentFloor && nextFloor > currentFloor) || // Yukarƒ± gidiyoruz
    (targetFloor < currentFloor && nextFloor < currentFloor); // A≈üaƒüƒ± gidiyoruz

  console.log(
    `   Floor check: ${connectorId} | from=${fromFloor}, to=${toFloor} | current=${currentFloor}, target=${targetFloor} | starts=${startsFromCurrentFloor}, direction=${isCorrectDirection}`
  );

  return startsFromCurrentFloor && isCorrectDirection;
}

/**
 * Entry/Exit mantƒ±ƒüƒ± ile path finding
 * @param {string} startId - Ba≈ülangƒ±√ß ID'si
 * @param {string} endId - Hedef ID'si
 * @param {string} startEntryConnector - Ba≈ülangƒ±√ß ENTRY connector'ƒ±
 * @param {Object} graph - Graph objesi
 * @param {Object} allGeoData - GeoJSON verileri
 * @returns {Array} Tam path
 */
export function findPathThroughConnectorEntryExit(startId, endId, startEntryConnector, graph, allGeoData) {
  console.log(`üöÄ Finding path through ENTRY connector: ${startEntryConnector}`);

  // 1. Ba≈ülangƒ±√ßtan ENTRY connector'a y√ºr√º
  let path = singleFloorDijkstra(startId, startEntryConnector, graph);
  if (path.length === 0) {
    console.log(`‚ùå Cannot reach ENTRY connector ${startEntryConnector} from start`);
    return [];
  }

  let currentConnector = startEntryConnector;
  let currentFloor = graph[startEntryConnector].floor;
  const endFloor = graph[endId].floor;

  // ƒ∞lk connector'ƒ±n transport tipini al ve koru
  const initialProps = getConnectorProperties(startEntryConnector, graph);
  let selectedTransportType = initialProps.connectorType;
  const direction = endFloor > currentFloor ? "up" : "down";

  console.log(`üöÄ Using transport: ${selectedTransportType}, direction: ${direction}`);
  console.log(`üöÄ Initial ENTRY baseName: ${initialProps.baseName}`);

  while (currentFloor !== endFloor) {
    const nextFloor = currentFloor < endFloor ? currentFloor + 1 : currentFloor - 1;

    // Mevcut ENTRY connector'ƒ±n baseName'ini al
    const currentProps = getConnectorProperties(currentConnector, graph);
    const currentBaseName = currentProps.baseName;

    console.log(`\n=== KAT DEƒûƒ∞≈ûƒ∞Mƒ∞: ${currentFloor} ‚Üí ${nextFloor} ===`);
    console.log(`üìç Current ENTRY: ${currentConnector}`);
    console.log(`üìç Current baseName: ${currentBaseName}`);

    // Aynƒ± escalator'ƒ±n sonraki kattaki EXIT'ini ara
    const baseNameParts = currentBaseName.replace(/-(up|down)$/, ""); // Son -up veya -down'ƒ± √ßƒ±kar
    const targetExitConnectorId = `f${nextFloor}-${baseNameParts}-${direction}-exit-node`;
    console.log(`üéØ Looking for matching EXIT: ${targetExitConnectorId}`);

    let exitConnector = null;
    if (graph[targetExitConnectorId]) {
      exitConnector = targetExitConnectorId;
      console.log(`‚úÖ Found expected EXIT: ${exitConnector}`);
    } else {
      console.log(`‚ùå Expected EXIT not found, searching alternatives...`);

      // Alternatif: Aynƒ± baseName'li herhangi bir EXIT ara
      const alternativeExits = Object.keys(graph).filter((id) => {
        const node = graph[id];
        if (node.type !== "floor-connector-node" || node.floor !== nextFloor) {
          return false;
        }

        const props = getConnectorProperties(id, graph);
        return (
          props.baseName === currentBaseName &&
          props.nodeType === "exit" &&
          props.connectorType === selectedTransportType &&
          canUseConnectorDirection(props, direction)
        );
      });

      console.log(`üîç Found ${alternativeExits.length} alternative EXIT connectors:`);
      alternativeExits.forEach((id) => {
        const props = getConnectorProperties(id, graph);
        console.log(`   - ${id}: baseName=${props.baseName}, direction=${props.direction}`);
      });

      if (alternativeExits.length === 0) {
        console.log(`‚ùå No EXIT connector found for baseName: ${currentBaseName}`);
        return [];
      }

      exitConnector = alternativeExits[0];
      console.log(`‚úÖ Selected alternative EXIT: ${exitConnector}`);
    }

    // Kat deƒüi≈üimi - path'e EXIT connector'ƒ± ekle
    path.push(exitConnector);
    currentConnector = exitConnector;
    currentFloor = nextFloor;
    console.log(`üè¢ Moved to floor ${currentFloor}, now at EXIT: ${currentConnector}`);

    // Hedef kata ula≈ütƒ±k mƒ±?
    if (currentFloor === endFloor) {
      console.log(`üéØ Reached target floor ${endFloor}`);
      break;
    }

    // √áOK KATLI GE√áI≈û: Exit'ten sonraki en yakƒ±n ENTRY'yi bul
    console.log(`\n--- SONRAKI ESCALATOR ARAMA (Kat ${currentFloor}) ---`);
    console.log(`üìç Current EXIT position: ${currentConnector}`);

    const nextEntryConnectors = Object.keys(graph).filter((id) => {
      const node = graph[id];
      if (node.type !== "floor-connector-node" || node.floor !== currentFloor || id === currentConnector) {
        return false;
      }

      const props = getConnectorProperties(id, graph);
      const isValidEntry =
        props.nodeType === "entry" &&
        props.connectorType === selectedTransportType &&
        canUseConnectorDirection(props, direction) &&
        canUseConnectorFloors(id, currentFloor, endFloor, graph, allGeoData);

      if (isValidEntry) {
        console.log(`   ‚úì Valid ENTRY found: ${id} (baseName: ${props.baseName})`);
      }

      return isValidEntry;
    });

    console.log(`\nüîç TOPLAM ${nextEntryConnectors.length} GE√áERLI ENTRY CONNECTOR BULUNDU:`);
    if (nextEntryConnectors.length === 0) {
      console.log(`‚ùå No ENTRY connectors found on floor ${currentFloor} for next leg`);
      return [];
    }

    // T√ºm ENTRY'lere olan mesafeleri hesapla
    console.log(`\nüìè MESAFE HESAPLAMALARI:`);
    const entryDistances = [];

    for (const entryId of nextEntryConnectors) {
      const entryProps = getConnectorProperties(entryId, graph);
      console.log(`\n   Checking ENTRY: ${entryId}`);
      console.log(`   BaseName: ${entryProps.baseName}`);

      const walkPath = singleFloorDijkstra(currentConnector, entryId, graph);
      if (walkPath.length > 0) {
        const distance = calculatePathDistance(walkPath, graph);
        entryDistances.push({
          id: entryId,
          baseName: entryProps.baseName,
          distance: distance,
          pathLength: walkPath.length,
        });
        console.log(`   ‚úÖ Reachable - Distance: ${distance.toFixed(1)}m, Path nodes: ${walkPath.length}`);
      } else {
        console.log(`   ‚ùå Not reachable - No path found`);
      }
    }

    if (entryDistances.length === 0) {
      console.log(`‚ùå No reachable ENTRY connectors found on floor ${currentFloor}`);
      return [];
    }

    // En yakƒ±n ENTRY'yi se√ß
    entryDistances.sort((a, b) => a.distance - b.distance);

    console.log(`\nüèÜ MESAFE SIRALAMASI:`);
    entryDistances.forEach((entry, index) => {
      const marker = index === 0 ? "üëë SELECTED" : "   ";
      console.log(`   ${marker} ${entry.id}`);
      console.log(`       BaseName: ${entry.baseName}`);
      console.log(`       Distance: ${entry.distance.toFixed(1)}m`);
      console.log(`       Path nodes: ${entry.pathLength}`);
    });

    const closestEntry = entryDistances[0];
    console.log(`\n‚úÖ SELECTED CLOSEST ENTRY: ${closestEntry.id}`);
    console.log(`   Distance: ${closestEntry.distance.toFixed(1)}m`);
    console.log(`   BaseName: ${closestEntry.baseName}`);

    // EXIT'ten en yakƒ±n ENTRY'ye koridordan y√ºr√º
    console.log(`\nüö∂ Walking from EXIT to ENTRY: ${currentConnector} ‚Üí ${closestEntry.id}`);
    const corridorWalk = singleFloorDijkstra(currentConnector, closestEntry.id, graph);
    if (corridorWalk.length === 0) {
      console.log(`‚ùå Cannot walk from EXIT to ENTRY: ${currentConnector} ‚Üí ${closestEntry.id}`);
      return [];
    }

    console.log(`‚úÖ Corridor walk successful: ${corridorWalk.length} nodes`);
    path = [...path, ...corridorWalk.slice(1)];
    currentConnector = closestEntry.id; // Yeni ENTRY artƒ±k mevcut connector

    console.log(`üìç Now positioned at new ENTRY: ${currentConnector}`);
  }

  // Son adƒ±m: EXIT connector'dan hedefe y√ºr√º
  console.log(`\nüéØ FINAL DESTINATION WALK`);
  console.log(`From: ${currentConnector}`);
  console.log(`To: ${endId}`);

  const finishWalk = singleFloorDijkstra(currentConnector, endId, graph);
  if (finishWalk.length === 0) {
    console.log(`‚ùå Cannot reach destination from EXIT connector: ${currentConnector} ‚Üí ${endId}`);
    return [];
  }

  console.log(`‚úÖ Final walk successful: ${finishWalk.length} nodes`);
  path = [...path, ...finishWalk.slice(1)];

  console.log(`\nüéâ COMPLETE PATH FOUND!`);
  console.log(`Total nodes: ${path.length}`);
  console.log(`Total distance: ${calculatePathDistance(path, graph).toFixed(1)}m`);

  return path;
}
